
import os
import re
import requests
import base64
from pathlib import Path

api_key = "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"

def process_problems(api_key):
    base_dir = "/home/alex/Downloads/ideas/ogemath/"
    codes = """
1.1 Натуральные и целые числа. Признаки делимости
1.2 Обыкновенные/десятичные дроби, проценты
1.3 Рациональные числа и операции
1.4 Действительные числа и операции
1.5 Приближённые вычисления и округление
2.1 Буквенные выражения
2.2 Степени и их свойства
2.3 Многочлены
2.4 Алгебраические дроби
2.5 Арифметические корни
3.1 Уравнения и системы
3.2 Неравенства и системы
3.3 Текстовые задачи
4.1 Последовательности
4.2 Прогрессии и сложные проценты
5.1 Свойства и графики функций
6.1 Координатная прямая
6.2 Декартовы координаты
7.1 Геометрические фигуры
7.2 Треугольники
7.3 Многоугольники
7.4 Окружность и круг
7.5 Измерения
7.6 Векторы
8.1 Описательная статистика
8.2 Вероятность
8.3 Комбинаторика
8.4 Множества
8.5 Графы
"""
    difficulty_def = """
Определения уровней сложности:
Уровень 1 (Простая):
Требует 1-2 прямолинейных шага для решения.
Задействует базовые арифметические операции (сложение, вычитание, умножение, деление) или простейшие алгебраические преобразования.
Предполагает прямое применение одной общеизвестной формулы или концепции.
Формулировка задачи ясная, без сложной терминологии или избыточной информации.
Пример: "Найдите значение (\\left(\\frac{5}{22}-\\frac{8}{11}\\right) \\cdot \\frac{11}{5})"

Уровень 2 (Более сложная чем 1):
Может потребовать 2-3 шага для решения.
Задействует несколько более сложные концепции или комбинацию простых (например, основы геометрии, решение простых линейных уравнений, понимание процентов).
Может требовать внимательного прочтения для извлечения необходимой информации из короткой текстовой задачи.
Применение одной-двух формул или одной формулы с некоторыми преобразованиями.
Пример: "Родительский комитет закупил 25 пазлов... Найдите вероятность того, что Володе достанется пазл с машиной."

Уровень 3 (Более сложная чем 2):
Требует выполнения нескольких шагов (обычно 3-5).
Задействует понимание и применение умеренно сложных концепций (например, системы уравнений, квадратные уравнения, свойства геометрических фигур, многоэтапные текстовые задачи).
Может включать интерпретацию графиков или диаграмм.
Требует определенной последовательности операций или применения нескольких формул.
Может содержать некоторую избыточную информацию, которую необходимо отфильтровать.
Пример: Серия из 5 взаимосвязанных задач о поездке Насти . Отдельные подзадачи могут быть Уровня 2 или 3, но весь комплекс, требующий понимания сценария и выполнения различных расчетов, в целом соответствует Уровню 3. Либо: "Упростите выражение (\\left(\\frac{n+2}{n^{2}-n-6}-\\frac{n}{n^{2}-6 n+9}\\right) \\cdot(2 n-6)^{2})."

Уровень 4 (Более сложная чем 3):
Требует значительного количества шагов или сложной цепи рассуждений.
Задействует продвинутые для стандартного школьного уровня концепции (например, более сложная теория вероятностей, продвинутая алгебра, пространственное мышление в геометрии, нестандартные подходы к решению).
Часто включает многоэтапные текстовые задачи со значительным объемом контекстуальной информации, которую необходимо проанализировать и математически смоделировать.
Может требовать интуиции или распознавания менее очевидной закономерности или "ключа" к решению.
Может включать доказательства или обоснования, требующие твердого понимания основополагающих принципов.
Пример: "Основания трапеции относятся как (1: 3). Через точку пересечения диагоналей проведена прямая, параллельная основаниям. В каком отношении эта прямая делит площадь трапеции?"

Уровень 5 (Самая сложная):
Требует глубокого концептуального понимания и изощренных стратегий решения проблем.
Часто включает абстрактные рассуждения, доказательства нетривиальных теорем или объединение концепций из различных областей математики.
Может требовать творческого мышления и поиска новых подходов.
Задачи обычно объемные, включают множество зависимых частей или требуют обширных вычислений и проверок.
Могут быть задачами олимпиадного уровня или требующими математических знаний университетского уровня.
Пример: "В остроугольном треугольнике (A B C) точки (A, C), центр описанной окружности (O) и центр вписанной окружности (I) лежат на одной окружности. Докажите, что угол (A B C) равен (60^{\\circ})."
"""

    for n in range(1, 11): #Десять экзаменационных листов всего у нас
        # 1. Подготовка директорий
        problem_dir = Path(f"{base_dir}fipi_training_exams_from_math100_latex/{n}/")
        solution_dir = Path(f"{base_dir}fipi_training_exams_from_math100_solutions/{n}/")
        solution_dir.mkdir(parents=True, exist_ok=True)
        # 2. Обработка файлов
        for file in problem_dir.glob("*.txt"):
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
            # Извлечение данных
            problem_text = re.search(r'problem_text:\n(.*?)\nanswer:', content, re.DOTALL).group(1).strip()
            if file.stem == 'problem_2' or file.stem == 'problem_3' or file.stem == 'problem_4' or file.stem == 'problem_5':
                problem_text = r'''Алексей Юрьевич решил построить на дачном участке теплицу длиной $N P=5,5$ м. Для этого он сделал прямоугольный фундамент. Для каркаса теплицы Алексей Юрьевич заказывает металлические дуги в форме полуокружностей длиной 5,3 м каждая и плёнку для обтяжки. В передней стенке планируется вход, показанный на рисунке прямоугольником $A C D B$. Точки $A$ и $B$ - середины отрезков МО и $O N$ соответственно.

\includegraphics[max width=\textwidth, center]{2025_05_06_53837cfe8f639be0a47eg-1}
''' + " " + problem_text

            answer = re.search(r'answer:\s*(.*)', content).group(1).strip()

            # 3. Поиск изображений
            images = []
            image_matches = re.finditer(r'\\includegraphics.*?\{(.*?)\}', problem_text)
            for match in image_matches:
                image_file = match.group(1)
                image_path = f"{base_dir}fipi_training_exams_from_math100_mathpix_UNzip/{n}/images/{image_file}.jpg"
                
                if image_path:
                    with open(image_path, "rb") as image_file:
                        encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
                        images.append({
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": "image/jpg",  # Измените на актуальный тип
                                "data": encoded_image
                            }
                        })

            # 4. Формирование промпта
            messages = [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": f"""Ты репетитор по математике. Реши задачу:
                            
                            problem_text: {problem_text}
                                                        
                            Требования:
                            1. Решение на русском в LaTeX без преамбулы
                            2. В тексте решения выдели ключевые шаги решения с прописанной явно нумерацией "Шаг 1", "Шаг 2" и так далее
                            2. Если окончательный ответ это дробь, переведи ее в десятичную дробь
                            3. Найди единственный код темы, который лучше всего соответствует задаче и дай ответ в виде соответствующего номера: {codes}
                            4. Установи уровень сложности и дай ответ в виде соответствующего числа: {difficulty_def}
                            
                            Формат ответа:
                            solution_text: [решение]
                            code: [код в виде числа]
                            difficulty: [уровень в виде числа]"""
                        }
                    ] + images
                }
            ]

            # 5. Отправка запроса
            headers = {
                "Authorization": f"Bearer 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",
                "Content-Type": "application/json"
            }

            payload = {
                "model": "openai/o4-mini-high",
                "messages": messages,
                "max_tokens": 20000,
                "temperature": 0.7
            }
            #"qwen/qwen2.5-vl-72b-instruct", "temperature": 0.6
            try:
                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=30
                )
                response.raise_for_status()

                solution = response.json()['choices'][0]['message']['content']
                solution_file = solution_dir / f"{n}_{file.stem.split('_')[1]}.txt"
                print(f"Done:  {n}_{file.stem.split('_')[1]}.txt")
                print(images)
                with open(solution_file, 'w', encoding='utf-8') as f:
                    f.write(solution)

            except Exception as e:
                print(f"Ошибка обработки {file}: {str(e)}")
                print(images)

process_problems("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")
